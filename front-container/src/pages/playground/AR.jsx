import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import { useAppSelector } from '../../store/hooks';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ AR
let startARSessionFunction = null;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export function startARSession() {
  if (startARSessionFunction) {
    return startARSessionFunction();
  }
  return false;
}

function AR() {
  const mountRef = useRef(null);
  const token = useAppSelector(state => state.auth.token);
  const isDemoUser = token === 'demo-token-no-permissions';
  const [arActive, setArActive] = useState(false);

  useEffect(() => {
    if (!mountRef.current) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è AR
    const loadScripts = async () => {
      // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è AR
      const style = document.createElement('style');
      style.textContent = `
        .model-select {
          position: fixed;
          top: 60px;
          left: 10px;
          z-index: 9000;
          background: rgba(0, 0, 0, 0.7);
          padding: 15px;
          border-radius: 10px;
          pointer-events: auto;
          display: flex;
          flex-direction: column;
          gap: 10px;
          min-width: 200px;
        }
        
        .model-select select {
            padding: 8px;
            border-radius: 5px;
            border: none;
            background: white;
            font-size: 14px;
            width: 100%;
        }
        
        .model-select .buttons-container {
            display: flex;
            gap: 10px;
            justify-content: center;
            margin-top: 5px;
            flex-wrap: wrap;
        }
        
        .model-select .buttons-container button {
            padding: 6px 10px;
            border: none;
            border-radius: 5px;
            background: white;
            color: black;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s;
            text-align: center;
            min-width: 70px;
        }
        
        .model-select .buttons-container button.active {
            background: #4CAF50;
            color: white;
        }
        
        .ui-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
            z-index: 9000;
        }
        
        .ui-container > * {
            pointer-events: auto;
        }
        
        #ARButton {
            position: fixed !important;
            bottom: 20px !important;
            left: 50% !important;
            transform: translateX(-50%) !important;
            padding: 12px 24px !important;
            border: 1px solid #fff !important;
            border-radius: 4px !important;
            background: rgba(0, 0, 0, 0.8) !important;
            color: #fff !important;
            font: 13px sans-serif !important;
            text-align: center !important;
            outline: none !important;
            z-index: 999999 !important;
            cursor: pointer !important;
        }
        
        .demo-restrictions {
            position: fixed;
            bottom: 70px;
            left: 50%;
            transform: translateX(-50%);
            background-color: rgba(255, 87, 34, 0.9);
            color: white;
            padding: 10px 15px;
            border-radius: 5px;
            font-size: 14px;
            z-index: 9999;
            text-align: center;
            max-width: 90%;
            display: none;
        }
        
        .ar-container {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: 200;
        }
        
        .back-button {
            position: fixed;
            top: 15px;
            right: 15px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            z-index: 99999;
        }

        .burger-menu-button {
            position: fixed;
            top: 15px;
            left: 15px;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 20px;
            font-weight: bold;
            z-index: 99999;
        }
        
        .stop-ar-button {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: #f44336;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            font-size: 16px;
            z-index: 99999;
        }
        
        .show-planes-button {
            position: relative;
            background: white;
            color: black;
            border: none;
            padding: 6px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            min-width: 70px;
        }
        
        .show-planes-button.active {
            background: #4CAF50;
            color: white;
        }

        
        .show-planes-button.active {
            background: #4CAF50;
        }
      `;
      document.head.appendChild(style);

      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AR —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Three.js –∏ WebXR
        const ARButton = await import('three/examples/jsm/webxr/ARButton.js').then(module => module.ARButton);
        const GLTFLoader = await import('three/examples/jsm/loaders/GLTFLoader.js').then(module => module.GLTFLoader);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É, –∫–∞–º–µ—Ä—É –∏ —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 20);
        
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.xr.enabled = true;
         
        if (mountRef.current) {
          mountRef.current.appendChild(renderer.domElement);
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–∏–π –æ–≤–µ—Ä–ª–µ–π –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º AR —Å–µ—Å—Å–∏–∏
        const uiContainer = document.createElement('div');
        uiContainer.className = 'ui-container';
        document.body.appendChild(uiContainer);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        const burgerMenuButton = document.createElement('button');
        burgerMenuButton.className = 'burger-menu-button';
        burgerMenuButton.id = 'burgerMenuButton';
        burgerMenuButton.textContent = '‚ò∞';
        uiContainer.appendChild(burgerMenuButton);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–¥–ø–∏—Å—å –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 3D –∫–∞—Ä—Ç—ã
        const demoNotice = document.createElement('div');
        demoNotice.className = 'demo-restrictions';
        demoNotice.textContent = '–î–µ–º–æ-—Ä–µ–∂–∏–º: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.';
        uiContainer.appendChild(demoNotice);
        
        if (isDemoUser) {
          demoNotice.style.display = 'block';
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ GLTF
        const gltfLoader = new GLTFLoader();
        
        // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        const loadedModels = {
          sunflower: null,
          reticle: null,
          userModel: null
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
        const modelSelectContainer = document.createElement('div');
        modelSelectContainer.className = 'model-select';
        modelSelectContainer.innerHTML = `
          <select id="modelSelect">
              <option value="sunflower">–ü–æ–¥—Å–æ–ª–Ω—É—Ö</option>
              <option value="cube">–ö—É–±</option>
              <option value="sphere">–°—Ñ–µ—Ä–∞</option>
          </select>
          <input type="file" id="fileInput" accept=".glb,.gltf" style="margin-top: 10px; width: 100%;" />
          <div class="buttons-container">
              <button id="placementButton" class="active">üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å</button>
              <button id="editButton" ${isDemoUser ? 'disabled style="opacity: 0.5;cursor: not-allowed;"' : ''}>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
              <button id="showPlanesButton">üîç –ü–ª–æ—Å–∫–æ—Å—Ç–∏</button>
          </div>
        `;
        uiContainer.appendChild(modelSelectContainer);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç
        const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);
        light.position.set(0.5, 1, 0.25);
        scene.add(light);
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        let selectedModelType = "sunflower";
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ controller select –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å UI
        const isUIElement = (element) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ —á–∞—Å—Ç—å—é UI
          let currentElement = element;
          while (currentElement) {
            if (currentElement.classList && 
                (currentElement.classList.contains('model-select') || 
                 currentElement.classList.contains('burger-menu-button') ||
                 currentElement.tagName === 'SELECT' || 
                 currentElement.tagName === 'BUTTON' ||
                 currentElement.tagName === 'OPTION')) {
              return true;
            }
            currentElement = currentElement.parentElement;
          }
          return false;
        };
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å UI
        let interactingWithUI = false;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π
        document.body.addEventListener('touchstart', (event) => {
          if (isUIElement(event.target)) {
            interactingWithUI = true;
            console.log('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å UI —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–∞—á–∞—Ç–æ');
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ controller select
            event.stopPropagation();
          }
        }, true);
        
        document.body.addEventListener('touchend', (event) => {
          if (isUIElement(event.target)) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞—Ç–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
            setTimeout(() => {
              interactingWithUI = false;
              console.log('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å UI —ç–ª–µ–º–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            }, 300);
            event.stopPropagation();
          }
        }, true);
        
        document.body.addEventListener('click', (event) => {
          if (isUIElement(event.target)) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–ª–∏–∫–∞ —Ç–∞–∫–∂–µ
            interactingWithUI = true;
            console.log('–ö–ª–∏–∫ –ø–æ UI —ç–ª–µ–º–µ–Ω—Ç—É');
            event.stopPropagation();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞—Ç–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
              interactingWithUI = false;
            }, 300);
          }
        }, true);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        const modelSelect = document.getElementById('modelSelect');
        const fileInput = document.getElementById('fileInput');

        if (fileInput) {
          console.log('–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞:', fileInput);
          fileInput.addEventListener('change', function(event) {
            console.log('–§–∞–π–ª –≤—ã–±—Ä–∞–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');
            const file = event.target.files[0];
            if (!file) {
              console.log('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
              return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
            const isValidFormat = file.name.toLowerCase().endsWith('.glb') || 
                                file.name.toLowerCase().endsWith('.gltf');
            if (!isValidFormat) {
              alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .glb –∏–ª–∏ .gltf');
              return;
            }
            
            console.log('–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:', file.name);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            const loadingNotification = document.createElement('div');
            loadingNotification.style.position = 'fixed';
            loadingNotification.style.bottom = '100px';
            loadingNotification.style.left = '50%';
            loadingNotification.style.transform = 'translateX(-50%)';
            loadingNotification.style.background = 'rgba(0, 0, 0, 0.7)';
            loadingNotification.style.color = 'white';
            loadingNotification.style.padding = '10px 15px';
            loadingNotification.style.borderRadius = '5px';
            loadingNotification.style.zIndex = '99999';
            loadingNotification.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ "${file.name}"...`;
            document.body.appendChild(loadingNotification);
            
            interactingWithUI = true;
            setTimeout(() => {
              interactingWithUI = false;
            }, 300);
            
            const reader = new FileReader();
            
            reader.onload = function(e) {
              console.log('–§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:', e.target.result.byteLength);
              const contents = e.target.result;
              
              // –°–æ–∑–¥–∞–µ–º URL –∏–∑ –º–∞—Å—Å–∏–≤–∞
              const blob = new Blob([contents]);
              const url = URL.createObjectURL(blob);
              
              console.log('–°–æ–∑–¥–∞–Ω URL –¥–ª—è –º–æ–¥–µ–ª–∏:', url);
              
              // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–æ–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
              modelSelect = document.getElementById('modelSelect');
              let userModelOption = document.createElement('option');
              userModelOption.value = 'userModel';
              userModelOption.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: ${file.name}...`;
              modelSelect.appendChild(userModelOption);
              modelSelect.value = 'userModel';
              
              // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å
              console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å...');
              gltfLoader.load(url, 
                function(gltf) {
                  console.log('–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', gltf);
                  
                  // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                  if (loadingNotification.parentNode) {
                    loadingNotification.parentNode.removeChild(loadingNotification);
                  }
                  
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                  loadedModels.userModel = gltf.scene;
                  
                  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏—é –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ
                  if (userModelOption) {
                    userModelOption.textContent = `–ú–æ–¥–µ–ª—å: ${file.name}`;
                  }
                  
                  // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å
                  if (modelSelect) {
                    modelSelect.value = 'userModel';
                    selectedModelType = 'userModel';
                  }
                  
                  console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞:', file.name);
                  URL.revokeObjectURL(url);
                  
                  // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                  const notification = document.createElement('div');
                  notification.style.position = 'fixed';
                  notification.style.bottom = '100px';
                  notification.style.left = '50%';
                  notification.style.transform = 'translateX(-50%)';
                  notification.style.background = 'rgba(37, 185, 85, 0.9)';
                  notification.style.color = 'white';
                  notification.style.padding = '10px 15px';
                  notification.style.borderRadius = '5px';
                  notification.style.zIndex = '99999';
                  notification.textContent = `–ú–æ–¥–µ–ª—å "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`;
                  document.body.appendChild(notification);
                  
                  setTimeout(() => {
                    if (notification.parentNode) {
                      notification.parentNode.removeChild(notification);
                    }
                  }, 3000);
                }, 
                function(xhr) {
                  console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏:', (xhr.loaded / xhr.total * 100) + '%');
                  if (loadingNotification.parentNode) {
                    const progress = Math.round(xhr.loaded / xhr.total * 100);
                    loadingNotification.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ "${file.name}"... ${progress}%`;
                  }
                },
                function(error) {
                  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏:', error);
                  
                  // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                  if (loadingNotification.parentNode) {
                    loadingNotification.parentNode.removeChild(loadingNotification);
                  }
                  
                  alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.');
                  
                  // –£–¥–∞–ª—è–µ–º –æ–ø—Ü–∏—é, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                  if (userModelOption && userModelOption.parentNode) {
                    userModelOption.parentNode.removeChild(userModelOption);
                  }
                  
                  URL.revokeObjectURL(url);
                }
              );
            };
            
            reader.onerror = function(e) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', e);
              
              // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
              if (loadingNotification.parentNode) {
                loadingNotification.parentNode.removeChild(loadingNotification);
              }
              
              alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
            };
            
            console.log('–ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ ArrayBuffer...');
            reader.readAsArrayBuffer(file);
          });
        }
        
        if (modelSelect) {
          modelSelect.addEventListener('change', (event) => {
            const select = event.target;
            selectedModelType = select.value;
            console.log('–í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–æ–¥–µ–ª–∏:', selectedModelType, 'options:', select.options, 'selectedIndex:', select.selectedIndex);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if (select.selectedIndex >= 0 && select.options[select.selectedIndex]) {
              console.log('–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è:', select.options[select.selectedIndex].value);
            }
            
            event.stopPropagation();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å UI
            interactingWithUI = true;
            setTimeout(() => {
              interactingWithUI = false;
            }, 300);
          });
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–æ–±—ã—Ç–∏–π
          const modelSelectContainer = document.querySelector('.model-select');
          if (modelSelectContainer) {
            modelSelectContainer.addEventListener('click', (event) => {
              event.stopPropagation();
              interactingWithUI = true;
              setTimeout(() => {
                interactingWithUI = false;
              }, 300);
            }, true);
            
            modelSelectContainer.addEventListener('touchstart', (event) => {
              event.stopPropagation();
              interactingWithUI = true;
            }, true);
            
            modelSelectContainer.addEventListener('touchend', (event) => {
              event.stopPropagation();
              setTimeout(() => {
                interactingWithUI = false;
              }, 300);
            }, true);
          }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ GLTF
        const createStaticModels = () => {
          console.log('–°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ GLTF');
          
          // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–æ–ª–Ω—É—Ö
          const sunflowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 0.3, 32);
          const stemMaterial = new THREE.MeshStandardMaterial({ color: 0x008800 });
          const stem = new THREE.Mesh(sunflowerGeometry, stemMaterial);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ–≤–∫—É –ø–æ–¥—Å–æ–ª–Ω—É—Ö–∞
          const headGeometry = new THREE.SphereGeometry(0.15, 32, 32);
          const headMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700 });
          const head = new THREE.Mesh(headGeometry, headMaterial);
          head.position.set(0, 0.2, 0);
          
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
          const sunflowerModel = new THREE.Group();
          sunflowerModel.add(stem);
          sunflowerModel.add(head);
          
          // –°–æ–∑–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å
          const reticleGeometry = new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2);
          const reticleMaterial = new THREE.MeshBasicMaterial({ 
            color: 0x0099ff,
            transparent: true,
            opacity: 0.7
          });
          const reticleModel = new THREE.Mesh(reticleGeometry, reticleMaterial);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à –æ–±—ä–µ–∫—Ç loadedModels –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
          loadedModels.sunflower = sunflowerModel;
          loadedModels.reticle = reticleModel;
          
          return loadedModels;
        };
        
        // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è GLTF
        createStaticModels();
        
        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        const possiblePaths = [
          { sunflower: '../ar/gltf/sunflower/sunflower.gltf', reticle: '../ar/gltf/reticle/reticle.gltf' },
          { sunflower: 'ar/gltf/sunflower/sunflower.gltf', reticle: 'ar/gltf/reticle/reticle.gltf' },
          { sunflower: '/ar/gltf/sunflower/sunflower.gltf', reticle: '/ar/gltf/reticle/reticle.gltf' },
          { sunflower: '/pages/playground/ar/gltf/sunflower/sunflower.gltf', reticle: '/pages/playground/ar/gltf/reticle/reticle.gltf' },
          { sunflower: './ar/gltf/sunflower/sunflower.gltf', reticle: './ar/gltf/reticle/reticle.gltf' },
          { sunflower: '../../ar/gltf/sunflower/sunflower.gltf', reticle: '../../ar/gltf/reticle/reticle.gltf' }
        ];
        
        // –°–û–ó–î–ê–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–£–Æ –ö–ù–û–ü–ö–£ AR –ò–ó THREEJS
        const xrButton = ARButton.createButton(renderer, {
          requiredFeatures: ['hit-test'],
          optionalFeatures: ['dom-overlay'],
          domOverlay: { root: document.body }
        });
        xrButton.textContent = 'WebXR Start AR';
        xrButton.id = 'ARButton'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        // document.body.appendChild(xrButton);
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ AR —Å–µ—Å—Å–∏–∏
        const startARSession = () => {
          console.log('–ó–∞–ø—É—Å–∫–∞–µ–º AR —Å–µ—Å—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ');
          if (xrButton) {
            xrButton.click();
            return true;
          }
          return false;
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        startARSessionFunction = startARSession;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É –í–∫–ª—é—á–∏—Ç—å AR –∏–∑ Main.tsx –∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ xrButton
        document.querySelectorAll('button').forEach(button => {
          if (button.textContent.includes('–í–∫–ª—é—á–∏—Ç—å AR')) {
            button.addEventListener('click', () => {
              startARSession();
            });
          }
        });
        
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        const placedObjects = [];
        
        // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        let selectedObject = null;
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        const planes = {
          meshes: new Map(),
          materials: {
            floor: new THREE.MeshBasicMaterial({ 
              color: 0x4488ff, 
              transparent: true, 
              opacity: 0.2,
              side: THREE.DoubleSide 
            }),
            wall: new THREE.MeshBasicMaterial({ 
              color: 0xff8844, 
              transparent: true, 
              opacity: 0.2,
              side: THREE.DoubleSide 
            }),
            ceiling: new THREE.MeshBasicMaterial({ 
              color: 0x44ff88, 
              transparent: true, 
              opacity: 0.2,
              side: THREE.DoubleSide 
            }),
            other: new THREE.MeshBasicMaterial({ 
              color: 0xffffff, 
              transparent: true, 
              opacity: 0.2,
              side: THREE.DoubleSide 
            })
          },
          active: false
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ AR —Å–µ—Å—Å–∏–∏
        renderer.xr.addEventListener('sessionstart', () => {
          console.log('AR session started');
          setArActive(true);
          
          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ARButton –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          xrButton.style.display = 'none';
          modelSelectContainer.style.display = 'flex';
        //   stopArButton.style.display = 'block';
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –≤ —Ä–µ–∂–∏–º–µ AR
          const burgerMenuBtn = document.getElementById('burgerMenuButton');
          if (burgerMenuBtn) {
            burgerMenuBtn.style.display = 'block';
          }
          
          // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–¥–ø–∏—Å—å –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ AR
          if (demoNotice) {
            demoNotice.style.display = 'none';
          }
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º hit-test –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
          const session = renderer.xr.getSession();
          if (session) {
            setupHitTest(session);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if ('requestPlaneDetection' in session) {
              session.requestPlaneDetection();
              session.addEventListener('planedetected', (event) => {
                const plane = event.plane;
                handlePlaneDetected(plane);
              });
            }
          }
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        const handlePlaneDetected = (plane) => {
          if (!planes.active) return;
          
          const geometry = new THREE.PlaneGeometry(1, 1);
          let material;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
          switch(plane.orientation) {
            case 'horizontal' && plane.normal.y > 0:
              material = planes.materials.floor;
              break;
            case 'horizontal' && plane.normal.y < 0:
              material = planes.materials.ceiling;
              break;
            case 'vertical':
              material = planes.materials.wall;
              break;
            default:
              material = planes.materials.other;
          }
          
          const mesh = new THREE.Mesh(geometry, material);
          planes.meshes.set(plane.id, mesh);
          scene.add(mesh);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏
          plane.addEventListener('update', () => {
            const mesh = planes.meshes.get(plane.id);
            if (mesh) {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
              mesh.scale.set(plane.extent.width, plane.extent.height, 1);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
              const matrix = new THREE.Matrix4();
              matrix.fromArray(plane.transform.matrix);
              mesh.position.setFromMatrixPosition(matrix);
              mesh.quaternion.setFromRotationMatrix(matrix);
            }
          });
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ hit-test
        const setupHitTest = async (session) => {
          const viewerSpace = await session.requestReferenceSpace('viewer');
          const hitTestSource = await session.requestHitTestSource?.({ space: viewerSpace });
           
          if (!hitTestSource) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ hit-test');
            return;
          }
          
          // –°–æ–∑–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
          const reticleGeometry = new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2);
          const reticleMaterial = new THREE.MeshBasicMaterial();
          const reticle = new THREE.Mesh(reticleGeometry, reticleMaterial);
          reticle.matrixAutoUpdate = false;
          reticle.visible = false;
          scene.add(reticle);
          
          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const MAX_DEMO_OBJECTS = 3;
          let placedObjectsCount = 0;
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
          const controller = renderer.xr.getController(0);
          
          controller.addEventListener('select', (event) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UI
            if (interactingWithUI) {
              console.log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å UI');
              return;
            }
            
            const placementButton = document.getElementById('placementButton');
            const editButton = document.getElementById('editButton');
            
            // –†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            if (placementButton && placementButton.classList.contains('active') && reticle.visible) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              if (isDemoUser && placedObjectsCount >= MAX_DEMO_OBJECTS) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                const existingNotice = document.querySelector('.demo-restrictions');
                if (existingNotice) {
                  existingNotice.style.display = 'block';
                  existingNotice.textContent = 
                    '–õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤.';
                  
                  // –°–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                  setTimeout(() => {
                    existingNotice.style.display = 'none';
                  }, 3000);
                }
                return;
              }
            
              // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
              const modelSelect = document.getElementById('modelSelect');
              let selectedModel = 'cube'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              
              if (modelSelect) {
                selectedModel = modelSelect.value;
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if (!selectedModel && modelSelect.selectedIndex >= 0 && modelSelect.options[modelSelect.selectedIndex]) {
                  selectedModel = modelSelect.options[modelSelect.selectedIndex].value;
                }
              }
              
              console.log('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç–∏–ø–∞:', selectedModel);
              
              let mesh;
              
              switch(selectedModel) {
                case 'sunflower':
                  if (loadedModels.sunflower) {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é GLTF –º–æ–¥–µ–ª—å –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å
                    mesh = loadedModels.sunflower.clone ? loadedModels.sunflower.clone() : loadedModels.sunflower;
                    
                    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–æ –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    if (mesh instanceof THREE.Group) {
                      // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ (THREE.Group)
                      mesh.scale.set(0.2, 0.2, 0.2);
                    } else {
                      // –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π GLTF –º–æ–¥–µ–ª–∏
                      mesh.scale.set(0.2, 0.2, 0.2);
                    }
                    
                    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–¥—Å–æ–ª–Ω—É—Ö–∞:', mesh);
                  } else {
                    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Å–æ–ª–Ω—É—Ö, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
                    const geometry = new THREE.CylinderGeometry(0.1, 0.1, 0.3, 32);
                    const material = new THREE.MeshStandardMaterial({ color: 0xFFD700 });
                    mesh = new THREE.Mesh(geometry, material);
                  }
                  break;
                
                case 'sphere':
                  // –°–æ–∑–¥–∞–µ–º —Å—Ñ–µ—Ä—É
                  const sphereGeometry = new THREE.SphereGeometry(0.15, 32, 32);
                  const sphereMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });
                  mesh = new THREE.Mesh(sphereGeometry, sphereMaterial);
                  break;
                
                case 'cube':
                  // –°–æ–∑–¥–∞–µ–º –∫—É–±
                  const cubeGeometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);
                  const cubeMaterial = new THREE.MeshStandardMaterial({ color: 0x00ff00 });
                  mesh = new THREE.Mesh(cubeGeometry, cubeMaterial);
                  break;
                
                case 'userModel':
                  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å
                  if (loadedModels.userModel) {
                    console.log('–†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å');
                    
                    // –ö–ª–æ–Ω–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ä–∞–∑–º–µ—â–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
                    mesh = loadedModels.userModel.clone();
                    
                    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    mesh.scale.set(0.2, 0.2, 0.2);
                  } else {
                    console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç');
                    // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—É–± –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                    const fallbackGeometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);
                    const fallbackMaterial = new THREE.MeshStandardMaterial({ color: 0x00ff00 });
                    mesh = new THREE.Mesh(fallbackGeometry, fallbackMaterial);
                  }
                  break;
                
                default:
                  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                  const defaultGeometry = new THREE.BoxGeometry(0.15, 0.15, 0.15);
                  const defaultMaterial = new THREE.MeshStandardMaterial({ color: 0x1E90FF });
                  mesh = new THREE.Mesh(defaultGeometry, defaultMaterial);
                  break;
              }
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
              mesh.position.setFromMatrixPosition(reticle.matrix);
              mesh.userData.selectable = true; // –û—Ç–º–µ—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—ã–±–æ—Ä–∞
              
              scene.add(mesh);
              placedObjects.push(mesh);
              placedObjectsCount++;
            } 
            // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞
            else if (editButton && editButton.classList.contains('active') && !isDemoUser) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ª–∏ –º—ã –∫–∞–∫–æ–π-—Ç–æ –æ–±—ä–µ–∫—Ç
              const raycaster = new THREE.Raycaster();
              const tmpVector = new THREE.Vector2(0, 0); // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—É—á –∏–∑ –∫–∞–º–µ—Ä—ã
              raycaster.setFromCamera(tmpVector, camera);
              
              // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –ª—É—á–æ–º
              const intersects = raycaster.intersectObjects(placedObjects, true);
              
              if (intersects.length > 0) {
                // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤—ã–±—Ä–∞–ª–∏
                const selected = intersects[0].object;
                
                // –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, —É–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
                if (selectedObject) {
                  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
                  if (selectedObject.material.originalColor) {
                    selectedObject.material.color.setHex(selectedObject.material.originalColor);
                  }
                }
                
                // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
                selectedObject = selected;
                
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
                if (selectedObject.material) {
                  selectedObject.material.originalColor = selectedObject.material.color.getHex();
                  selectedObject.material.color.setHex(0xff0000); // –ö—Ä–∞—Å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
                }
              } else {
                // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if (selectedObject) {
                  if (selectedObject.material && selectedObject.material.originalColor) {
                    selectedObject.material.color.setHex(selectedObject.material.originalColor);
                  }
                  selectedObject = null;
                }
              }
            }
          });
          
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è
          const onXRFrame = (time, frame) => {
            if (!frame) return session.requestAnimationFrame(onXRFrame);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã hit-test
            const hitTestResults = frame.getHitTestResults(hitTestSource);
            
            if (hitTestResults.length) {
              const hit = hitTestResults[0];
              const referenceSpace = renderer.xr.getReferenceSpace();
               
              if (referenceSpace) {
                const pose = hit.getPose(referenceSpace);
                
                if (pose) {
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                  const placementButton = document.getElementById('placementButton');
                  if (placementButton && placementButton.classList.contains('active')) {
                    reticle.visible = true;
                    reticle.matrix.fromArray(pose.transform.matrix);
                  } else {
                    reticle.visible = false;
                  }
                }
              }
            } else {
              reticle.visible = false;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (planes.active && planes.meshes.size > 0) {
              planes.meshes.forEach((mesh) => {
                mesh.visible = true;
              });
            } else {
              planes.meshes.forEach((mesh) => {
                mesh.visible = false;
              });
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
            const editButton = document.getElementById('editButton');
            if (selectedObject && editButton && editButton.classList.contains('active') && !isDemoUser) {
              // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
              // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≤—è–∑—ã–≤–∞—Ç—å –µ–≥–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º hit-test –∏–ª–∏ –∫ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
              if (hitTestResults.length > 0) {
                const hit = hitTestResults[0];
                const referenceSpace = renderer.xr.getReferenceSpace();
                if (referenceSpace) {
                  const pose = hit.getPose(referenceSpace);
                  if (pose) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                    selectedObject.position.set(
                      pose.transform.position.x,
                      pose.transform.position.y,
                      pose.transform.position.z
                    );
                  }
                }
              }
            }
            
            renderer.render(scene, camera);
            session.requestAnimationFrame(onXRFrame);
          };
          
          session.requestAnimationFrame(onXRFrame);
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        renderer.xr.addEventListener('sessionend', () => {
          console.log('AR session ended');
          setArActive(false);
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ARButton –∏ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          xrButton.style.display = 'block';
          modelSelectContainer.style.display = 'none';
        //   stopArButton.style.display = 'none';
          
          // –°–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ AR
          const burgerMenuBtn = document.getElementById('burgerMenuButton');
          if (burgerMenuBtn) {
            burgerMenuBtn.style.display = 'none';
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–¥–ø–∏—Å—å –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω–æ–≤–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–∞—Ä—Ç—ã
          if (isDemoUser && demoNotice) {
            demoNotice.style.display = 'block';
          }
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
          selectedObject = null;
          
          // –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É –æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
          placedObjects.forEach(obj => scene.remove(obj));
          placedObjects.length = 0;
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è 3D –∫–∞—Ä—Ç—ã (–Ω–µ AR —Ä–µ–∂–∏–º)
        const animate = () => {
          renderer.setAnimationLoop((time, frame) => {
            if (!frame) {
              renderer.render(scene, camera);
            }
          });
        };
        animate();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        const handleResize = () => {
          camera.aspect = window.innerWidth / window.innerHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth, window.innerHeight);
        };
        window.addEventListener('resize', handleResize);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const placementButton = document.getElementById('placementButton');
        const editButton = document.getElementById('editButton');
        
        if (placementButton && editButton) {
          placementButton.addEventListener('click', () => {
            placementButton.classList.add('active');
            editButton.classList.remove('active');
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            if (selectedObject) {
              if (selectedObject.material && selectedObject.material.originalColor) {
                selectedObject.material.color.setHex(selectedObject.material.originalColor);
              }
              selectedObject = null;
            }
          });
          
          if (!isDemoUser) {
            editButton.addEventListener('click', () => {
              editButton.classList.add('active');
              placementButton.classList.remove('active');
            });
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        const showPlanesButtonEl = document.getElementById('showPlanesButton');
        if (showPlanesButtonEl) {
          showPlanesButtonEl.addEventListener('click', () => {
            planes.active = !planes.active;
            if (planes.active) {
              showPlanesButtonEl.classList.add('active');
            } else {
              showPlanesButtonEl.classList.remove('active');
            }
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AR
        const stopArButtonEl = document.getElementById('stopArButton');
        if (stopArButtonEl) {
          stopArButtonEl.addEventListener('click', () => {
            if (renderer.xr.isPresenting) {
              renderer.xr.getSession()?.end();
            }
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        const burgerMenuButtonEl = document.getElementById('burgerMenuButton');
        if (burgerMenuButtonEl) {
          burgerMenuButtonEl.addEventListener('click', () => {
            const modelSelectContainer = document.querySelector('.model-select');
            if (modelSelectContainer) {
              // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
              if (modelSelectContainer.style.display === 'none') {
                modelSelectContainer.style.display = 'flex';
              } else {
                modelSelectContainer.style.display = 'none';
              }
            }
          });
        }
        
        // –ü—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AR
        modelSelectContainer.style.display = 'none';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        const burgerMenuBtn = document.getElementById('burgerMenuButton');
        if (burgerMenuBtn) {
          burgerMenuBtn.style.display = 'none';
        }
        
        return () => {
          // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          window.removeEventListener('resize', handleResize);
          renderer.setAnimationLoop(null);
          if (mountRef.current && renderer.domElement.parentNode === mountRef.current) {
            mountRef.current.removeChild(renderer.domElement);
          }
          
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          if (uiContainer && uiContainer.parentNode) {
            uiContainer.parentNode.removeChild(uiContainer);
          }
          if (xrButton && xrButton.parentNode) {
            xrButton.parentNode.removeChild(xrButton);
          }
          if (style && style.parentNode) {
            style.parentNode.removeChild(style);
          }
          
          // –û–±–Ω—É–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ AR
          startARSessionFunction = null;
        };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AR:', error);
      }
    };

    loadScripts();
  }, [isDemoUser, token]);

  return (
    <div 
      ref={mountRef} 
      className="ar-container" 
    />
  );
}

export default AR; 