import React, { useEffect, useRef, useState } from 'react';
import * as THREE from 'three';
import { useAppSelector } from '../../store/hooks';
import './AR.css';
import './notifications.css';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ AR
let startARSessionFunction = null;

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
export function startARSession() {
  if (startARSessionFunction) {
    return startARSessionFunction();
  }
  return false;
}

function AR() {
  const mountRef = useRef(null);
  const token = useAppSelector(state => state.auth.token);
  const userModel = useAppSelector(state => state.auth.userModel);
  const isDemoUser = token === 'demo-token-no-permissions';
  const [arActive, setArActive] = useState(false);

  useEffect(() => {
    if (!mountRef.current) return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è AR
    const loadScripts = async () => {
      try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AR —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Three.js –∏ WebXR
        const ARButton = await import('three/examples/jsm/webxr/ARButton.js').then(module => module.ARButton);
        const GLTFLoader = await import('three/examples/jsm/loaders/GLTFLoader.js').then(module => module.GLTFLoader);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É, –∫–∞–º–µ—Ä—É –∏ —Ä–µ–Ω–¥–µ—Ä–µ—Ä
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 20);
        
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.xr.enabled = true;
         
        if (mountRef.current) {
          mountRef.current.appendChild(renderer.domElement);
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ–º–∞—à–Ω–∏–π –æ–≤–µ—Ä–ª–µ–π –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º AR —Å–µ—Å—Å–∏–∏
        const uiContainer = document.createElement('div');
        uiContainer.className = 'ui-container';
        document.body.appendChild(uiContainer);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        const burgerMenuButton = document.createElement('button');
        burgerMenuButton.className = 'burger-menu-button';
        burgerMenuButton.id = 'burgerMenuButton';
        burgerMenuButton.textContent = '‚ò∞';
        uiContainer.appendChild(burgerMenuButton);
        
        if (isDemoUser) {
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const demoAlert = document.createElement('div');
          demoAlert.className = 'model-error-notification';
          demoAlert.textContent = '–î–µ–º–æ-—Ä–µ–∂–∏–º: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.';
          document.body.appendChild(demoAlert);
          
          setTimeout(() => {
            if (demoAlert.parentNode) {
              demoAlert.parentNode.removeChild(demoAlert);
            }
          }, 3000);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ GLTF
        const gltfLoader = new GLTFLoader();
        
        // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
        const loadedModels = {
          sunflower: null,
          reticle: null,
          userModel: null
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π
        const modelSelectContainer = document.createElement('div');
        modelSelectContainer.className = 'model-select';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–æ–¥–µ–ª—å
        const hasUserModel = userModel && userModel.url;
        
        const modelSelectHTML = `
          <select id="modelSelect">
              <option value="sunflower">–ü–æ–¥—Å–æ–ª–Ω—É—Ö</option>
              <option value="cube">–ö—É–±</option>
              <option value="sphere">–°—Ñ–µ—Ä–∞</option>
              ${hasUserModel ? `<option value="userModel">–ú–æ–¥–µ–ª—å: ${userModel.name}</option>` : ''}
          </select>
          <div class="buttons-container">
              <button id="placementButton" class="active">üì¶ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å</button>
              <button id="editButton" ${isDemoUser ? 'disabled style="opacity: 0.5;cursor: not-allowed;"' : ''}>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
              <button id="rotateButton">üîÑ –í—Ä–∞—â–∞—Ç—å</button>
              <button id="showPlanesButton">üîç –ü–ª–æ—Å–∫–æ—Å—Ç–∏</button>
          </div>
        `;
        
        modelSelectContainer.innerHTML = modelSelectHTML;
        uiContainer.appendChild(modelSelectContainer);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç
        const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 1);
        light.position.set(0.5, 1, 0.25);
        scene.add(light);
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
        let selectedModelType = "sunflower";
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë
        if (hasUserModel) {
          console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å –∏–∑ Main:', userModel.name);
          try {
            gltfLoader.load(userModel.url, 
              function(gltf) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
                loadedModels.userModel = gltf.scene;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å
                const modelSelect = document.getElementById('modelSelect');
                if (modelSelect) {
                  modelSelect.value = 'userModel';
                  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
                  selectedModelType = 'userModel';
                }
              },
              function(xhr) {
                console.log('–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑ Main:', (xhr.loaded / xhr.total * 100) + '%');
              },
              function(error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ –∏–∑ Main:', error);
              }
            );
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏:', error);
          }
        }
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ controller select –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å UI
        const isUIElement = (element) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–∏ —á–∞—Å—Ç—å—é UI
          let currentElement = element;
          while (currentElement) {
            if (currentElement.classList && 
                (currentElement.classList.contains('model-select') || 
                 currentElement.classList.contains('burger-menu-button') ||
                 currentElement.tagName === 'SELECT' || 
                 currentElement.tagName === 'BUTTON' ||
                 currentElement.tagName === 'OPTION')) {
              return true;
            }
            currentElement = currentElement.parentElement;
          }
          return false;
        };
        
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å UI
        let interactingWithUI = false;
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π
        document.body.addEventListener('touchstart', (event) => {
          if (isUIElement(event.target)) {
            interactingWithUI = true;
            console.log('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å UI —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–∞—á–∞—Ç–æ');
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ controller select
            event.stopPropagation();
          }
        }, true);
        
        document.body.addEventListener('touchend', (event) => {
          if (isUIElement(event.target)) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞—Ç–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
            setTimeout(() => {
              interactingWithUI = false;
              console.log('–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å UI —ç–ª–µ–º–µ–Ω—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
            }, 300);
            event.stopPropagation();
          }
        }, true);
        
        document.body.addEventListener('click', (event) => {
          if (isUIElement(event.target)) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–ª–∏–∫–∞ —Ç–∞–∫–∂–µ
            interactingWithUI = true;
            console.log('–ö–ª–∏–∫ –ø–æ UI —ç–ª–µ–º–µ–Ω—Ç—É');
            event.stopPropagation();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–±—Ä–∞—Ç–Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
              interactingWithUI = false;
            }, 300);
          }
        }, true);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
        const modelSelect = document.getElementById('modelSelect');

        if (modelSelect) {
          modelSelect.addEventListener('change', (event) => {
            const select = event.target;
            selectedModelType = select.value;
            console.log('–í—ã–±—Ä–∞–Ω —Ç–∏–ø –º–æ–¥–µ–ª–∏:', selectedModelType, 'options:', select.options, 'selectedIndex:', select.selectedIndex);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if (select.selectedIndex >= 0 && select.options[select.selectedIndex]) {
              console.log('–í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø—Ü–∏—è:', select.options[select.selectedIndex].value);
            }
            
            event.stopPropagation();
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å UI
            interactingWithUI = true;
            setTimeout(() => {
              interactingWithUI = false;
            }, 300);
          });
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–æ–±—ã—Ç–∏–π
          const modelSelectContainer = document.querySelector('.model-select');
          if (modelSelectContainer) {
            modelSelectContainer.addEventListener('click', (event) => {
              event.stopPropagation();
              interactingWithUI = true;
              setTimeout(() => {
                interactingWithUI = false;
              }, 300);
            }, true);
            
            modelSelectContainer.addEventListener('touchstart', (event) => {
              event.stopPropagation();
              interactingWithUI = true;
            }, true);
            
            modelSelectContainer.addEventListener('touchend', (event) => {
              event.stopPropagation();
              setTimeout(() => {
                interactingWithUI = false;
              }, 300);
            }, true);
          }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏ –≤–º–µ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∏ GLTF
       const createStaticModels = () => {
        console.log('–°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥–µ–ª–∏');

        // –ü–æ–¥—Å–æ–ª–Ω—É—Ö
        const sunflowerGeometry = new THREE.CylinderGeometry(0.1, 0.1, 0.3, 32);
        const stemMaterial = new THREE.MeshStandardMaterial({ color: 0x008800 });
        const stem = new THREE.Mesh(sunflowerGeometry, stemMaterial);

        const headGeometry = new THREE.SphereGeometry(0.15, 32, 32);
        const headMaterial = new THREE.MeshStandardMaterial({ color: 0xFFD700 });
        const head = new THREE.Mesh(headGeometry, headMaterial);
        head.position.set(0, 0.2, 0);

        const sunflowerModel = new THREE.Group();
        sunflowerModel.add(stem);
        sunflowerModel.add(head);

        // –ö—É–±
        const cubeGeometry = new THREE.BoxGeometry(0.2, 0.2, 0.2);
        const cubeMaterial = new THREE.MeshStandardMaterial({ color: 0x00ff00 });
        const cubeModel = new THREE.Mesh(cubeGeometry, cubeMaterial);

        // –°—Ñ–µ—Ä–∞
        const sphereGeometry = new THREE.SphereGeometry(0.15, 32, 32);
        const sphereMaterial = new THREE.MeshStandardMaterial({ color: 0xff0000 });
        const sphereModel = new THREE.Mesh(sphereGeometry, sphereMaterial);

        // –£–∫–∞–∑–∞—Ç–µ–ª—å (—Ä–µ—Ç–∏–∫–ª)
        const reticleGeometry = new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2);
        const reticleMaterial = new THREE.MeshBasicMaterial({ color: 0x0099ff, transparent: true, opacity: 0.7 });
        const reticleModel = new THREE.Mesh(reticleGeometry, reticleMaterial);

        loadedModels.sunflower = sunflowerModel;
        loadedModels.cube = cubeModel;
        loadedModels.sphere = sphereModel;
        loadedModels.reticle = reticleModel;
        };

        
        // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è GLTF
        createStaticModels();
        
        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        const possiblePaths = [
          { sunflower: '../ar/gltf/sunflower/sunflower.gltf', reticle: '../ar/gltf/reticle/reticle.gltf' },
          { sunflower: 'ar/gltf/sunflower/sunflower.gltf', reticle: 'ar/gltf/reticle/reticle.gltf' },
          { sunflower: '/ar/gltf/sunflower/sunflower.gltf', reticle: '/ar/gltf/reticle/reticle.gltf' },
          { sunflower: '/pages/playground/ar/gltf/sunflower/sunflower.gltf', reticle: '/pages/playground/ar/gltf/reticle/reticle.gltf' },
          { sunflower: './ar/gltf/sunflower/sunflower.gltf', reticle: './ar/gltf/reticle/reticle.gltf' },
          { sunflower: '../../ar/gltf/sunflower/sunflower.gltf', reticle: '../../ar/gltf/reticle/reticle.gltf' }
        ];
        
        // –°–û–ó–î–ê–ï–ú –°–¢–ê–ù–î–ê–†–¢–ù–£–Æ –ö–ù–û–ü–ö–£ AR –ò–ó THREEJS
        const xrButton = ARButton.createButton(renderer, {
          requiredFeatures: ['hit-test'],
          optionalFeatures: ['dom-overlay'],
          domOverlay: { root: document.body }
        });
        xrButton.textContent = 'WebXR Start AR';
        xrButton.id = 'ARButton'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        // document.body.appendChild(xrButton);
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ AR —Å–µ—Å—Å–∏–∏
        const startARSession = () => {
          console.log('–ó–∞–ø—É—Å–∫–∞–µ–º AR —Å–µ—Å—Å–∏—é –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ');
          if (xrButton) {
            xrButton.click();
            return true;
          }
          return false;
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        startARSessionFunction = startARSession;
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É –í–∫–ª—é—á–∏—Ç—å AR –∏–∑ Main.tsx –∏ –∏–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ xrButton
        // document.querySelectorAll('button').forEach(button => {
        //   if (button.textContent.includes('–í–∫–ª—é—á–∏—Ç—å AR')) {
        //     button.addEventListener('click', () => {
        //       startARSession();
        //     });
        //   }
        // });
        
        // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        const placedObjects = [];
        
        // –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        let selectedObject = null;
        
        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        const planes = {
          meshes: new Map(),
          materials: {
            floor: new THREE.MeshBasicMaterial({ 
              color: 0x4488ff, 
              transparent: true, 
              opacity: 0.2,
              side: THREE.DoubleSide 
            }),
            wall: new THREE.MeshBasicMaterial({ 
              color: 0xff8844, 
              transparent: true, 
              opacity: 0.2,
              side: THREE.DoubleSide 
            }),
            ceiling: new THREE.MeshBasicMaterial({ 
              color: 0x44ff88, 
              transparent: true, 
              opacity: 0.2,
              side: THREE.DoubleSide 
            }),
            other: new THREE.MeshBasicMaterial({ 
              color: 0xffffff, 
              transparent: true, 
              opacity: 0.2,
              side: THREE.DoubleSide 
            })
          },
          active: false
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ AR —Å–µ—Å—Å–∏–∏
        renderer.xr.addEventListener('sessionstart', () => {
          console.log('AR session started');
          setArActive(true);
          
          // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ARButton –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          xrButton.style.display = 'none';
          modelSelectContainer.style.display = 'flex';
        //   stopArButton.style.display = 'block';
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –≤ —Ä–µ–∂–∏–º–µ AR
          const burgerMenuBtn = document.getElementById('burgerMenuButton');
          if (burgerMenuBtn) {
            burgerMenuBtn.style.display = 'block';
          }
          
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
          const handlePlaneDetected = (plane) => {
            if (!planes.active) return;
            
            const geometry = new THREE.PlaneGeometry(1, 1);
            let material;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª
            switch(plane.orientation) {
              case 'horizontal' && plane.normal.y > 0:
                material = planes.materials.floor;
                break;
              case 'horizontal' && plane.normal.y < 0:
                material = planes.materials.ceiling;
                break;
              case 'vertical':
                material = planes.materials.wall;
                break;
              default:
                material = planes.materials.other;
            }
            
            const mesh = new THREE.Mesh(geometry, material);
            planes.meshes.set(plane.id, mesh);
            scene.add(mesh);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä –ø–ª–æ—Å–∫–æ—Å—Ç–∏
            plane.addEventListener('update', () => {
              const mesh = planes.meshes.get(plane.id);
              if (mesh) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
                mesh.scale.set(plane.extent.width, plane.extent.height, 1);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
                const matrix = new THREE.Matrix4();
                matrix.fromArray(plane.transform.matrix);
                mesh.position.setFromMatrixPosition(matrix);
                mesh.quaternion.setFromRotationMatrix(matrix);
              }
            });
          };
          
          // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º hit-test –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
          const session = renderer.xr.getSession();
          if (session) {
            setupHitTest(session);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if ('requestPlaneDetection' in session) {
              session.requestPlaneDetection();
              session.addEventListener('planedetected', (event) => {
                const plane = event.plane;
                handlePlaneDetected(plane);
              });
            }
          }
        });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        let isRotating = false;
        let rotationStartPosition = { x: 0, y: 0 };
        let rotationAxis = 'y'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Ä–∞—â–∞–µ–º –≤–æ–∫—Ä—É–≥ –æ—Å–∏ Y
        
        // –î–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        let originalMaterials = new Map();
        let highlightedObject = null;
        let contextMenuVisible = false;
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const highlightObject = (object) => {
          if (!object) return;
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
          if (highlightedObject && highlightedObject !== object) {
            unhighlightObject(highlightedObject);
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
          if (!originalMaterials.has(object.id)) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –æ–±—ä–µ–∫—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
            if (object.type === 'Group') {
              const objectMaterials = new Map();
              object.traverse((child) => {
                if (child.isMesh && child.material) {
                  objectMaterials.set(child.id, child.material.clone());
                }
              });
              originalMaterials.set(object.id, objectMaterials);
              
              // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –º–µ—à–∞–º –≤ –≥—Ä—É–ø–ø–µ
              object.traverse((child) => {
                if (child.isMesh) {
                  const highlightMaterial = child.material.clone();
                  highlightMaterial.emissive = new THREE.Color(0x3333ff);
                  highlightMaterial.emissiveIntensity = 0.5;
                  highlightMaterial.transparent = true;
                  highlightMaterial.opacity = 0.9;
                  child.material = highlightMaterial;
                }
              });
            } else {
              // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–µ—à–∞
              originalMaterials.set(object.id, object.material.clone());
              
              // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ–¥—Å–≤–µ—Ç–∫–∏
              const highlightMaterial = object.material.clone();
              highlightMaterial.emissive = new THREE.Color(0x3333ff);
              highlightMaterial.emissiveIntensity = 0.5;
              highlightMaterial.transparent = true;
              highlightMaterial.opacity = 0.9;
              object.material = highlightMaterial;
            }
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
          if (!object.userData.pulseAnimation) {
            const initialScale = object.scale.clone();
            const targetScale = initialScale.clone().multiplyScalar(1.1);
            
            let direction = 1;
            let factor = 0;
            
            object.userData.pulseAnimation = setInterval(() => {
              factor += direction * 0.05;
              
              if (factor >= 1) {
                factor = 1;
                direction = -1;
              } else if (factor <= 0) {
                factor = 0;
                direction = 1;
              }
              
              const scaleX = initialScale.x + (targetScale.x - initialScale.x) * factor;
              const scaleY = initialScale.y + (targetScale.y - initialScale.y) * factor;
              const scaleZ = initialScale.z + (targetScale.z - initialScale.z) * factor;
              
              object.scale.set(scaleX, scaleY, scaleZ);
            }, 50);
          }
          
          highlightedObject = object;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
          showObjectContextMenu(object);
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const unhighlightObject = (object) => {
          if (!object) return;
          
          // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—É–ª—å—Å–∞—Ü–∏–∏
          if (object.userData.pulseAnimation) {
            clearInterval(object.userData.pulseAnimation);
            delete object.userData.pulseAnimation;
          }
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
          if (object.userData.originalScale) {
            object.scale.copy(object.userData.originalScale);
          }
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          if (originalMaterials.has(object.id)) {
            const materials = originalMaterials.get(object.id);
            
            if (materials instanceof Map) {
              // –î–ª—è –≥—Ä—É–ø–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤
              object.traverse((child) => {
                if (child.isMesh && materials.has(child.id)) {
                  child.material = materials.get(child.id);
                }
              });
            } else {
              // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –º–µ—à–∞
              object.material = materials;
            }
            
            originalMaterials.delete(object.id);
          }
          
          if (highlightedObject === object) {
            highlightedObject = null;
          }
          
          // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
          hideObjectContextMenu();
        };
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        const showObjectContextMenu = (object) => {
          // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π, –∫–æ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
          const modelSelectContainer = document.querySelector('.model-select');
          if (modelSelectContainer) {
            modelSelectContainer.style.display = 'none';
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–µ–Ω—é
          let contextMenu = document.getElementById('objectContextMenu');
          if (contextMenu) {
            // –ï—Å–ª–∏ –º–µ–Ω—é —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            contextMenu.style.display = 'flex';
            contextMenuVisible = true;
            return;
          }
          
          // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
          contextMenu = document.createElement('div');
          contextMenu.id = 'objectContextMenu';
          contextMenu.className = 'object-context-menu';
          
          // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ –≤—Ä–∞—â–µ–Ω–∏—è
          const actions = [
            { id: 'moveUp', icon: '‚¨ÜÔ∏è', label: '–í–≤–µ—Ä—Ö', action: () => moveObject(object, 'up') },
            { id: 'moveDown', icon: '‚¨áÔ∏è', label: '–í–Ω–∏–∑', action: () => moveObject(object, 'down') },
            { id: 'rotateX', icon: 'üîÑ', label: 'X', action: () => startRotation(object, 'x') },
            { id: 'rotateY', icon: 'üîÑ', label: 'Y', action: () => startRotation(object, 'y') },
            { id: 'rotateZ', icon: 'üîÑ', label: 'Z', action: () => startRotation(object, 'z') },
            { id: 'delete', icon: 'üóëÔ∏è', label: '–£–¥–∞–ª–∏—Ç—å', action: () => deleteObject(object) }
          ];
          
          // –î–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
          const availableActions = isDemoUser 
            ? actions.filter(a => a.id !== 'duplicate') 
            : actions;
          
          const buttonContainer = document.createElement('div');
          buttonContainer.className = 'context-menu-buttons';
          
          availableActions.forEach(actionInfo => {
            const button = document.createElement('button');
            button.className = 'context-menu-button';
            button.innerHTML = `${actionInfo.icon}<span>${actionInfo.label}</span>`;
            button.addEventListener('click', (e) => {
              e.stopPropagation();
              actionInfo.action();
            });
            buttonContainer.appendChild(button);
          });
          
          contextMenu.appendChild(buttonContainer);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –≤ DOM
          document.body.appendChild(contextMenu);
          contextMenuVisible = true;
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
          if (!document.getElementById('contextMenuStyles')) {
            const style = document.createElement('style');
            style.id = 'contextMenuStyles';
            style.innerHTML = `
              .object-context-menu {
                position: fixed;
                bottom: 70px;
                left: 50%;
                transform: translateX(-50%);
                background: rgba(0, 0, 0, 0.7);
                border-radius: 10px;
                padding: 10px;
                z-index: 1000;
                display: flex;
                flex-direction: column;
                align-items: center;
              }
              .context-menu-buttons {
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                max-width: 300px;
              }
              .context-menu-button {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                background: rgba(60, 60, 60, 0.8);
                color: white;
                border: none;
                border-radius: 8px;
                margin: 5px;
                padding: 10px;
                min-width: 60px;
                height: 60px;
                font-size: 12px;
                cursor: pointer;
                transition: background 0.2s;
              }
              .context-menu-button:hover {
                background: rgba(80, 80, 80, 0.9);
              }
              .context-menu-button span {
                margin-top: 5px;
                font-size: 10px;
              }
            `;
            document.head.appendChild(style);
          }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
        const hideObjectContextMenu = () => {
          const contextMenu = document.getElementById('objectContextMenu');
          if (contextMenu) {
            contextMenu.style.display = 'none';
            contextMenuVisible = false;
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ —Å–∫—Ä—ã—Ç–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
          const modelSelectContainer = document.querySelector('.model-select');
          if (modelSelectContainer) {
            modelSelectContainer.style.display = 'flex';
          }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const moveObject = (object, direction) => {
          if (!object) return;
          
          // –í–µ–ª–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
          const step = 0.05;
          
          switch (direction) {
            case 'up':
              object.position.y += step;
              break;
            case 'down':
              object.position.y -= step;
              break;
            default:
              break;
          }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—Ä–∞—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const startRotation = (object, axis) => {
          if (!object) return;
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –æ—Å—å –≤—Ä–∞—â–µ–Ω–∏—è
          rotationAxis = axis;
          
          // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º –≤—Ä–∞—â–µ–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
          const rotateButton = document.getElementById('rotateButton');
          if (rotateButton && !rotateButton.classList.contains('active')) {
            rotateButton.click();
          }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const duplicateObject = (object) => {
          if (!object || isDemoUser) return;
          
          // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞
          const clone = object.clone();
          
          // –°–º–µ—â–∞–µ–º –∫–æ–ø–∏—é –Ω–µ–º–Ω–æ–≥–æ –≤ —Å—Ç–æ—Ä–æ–Ω—É
          clone.position.x += 0.1;
          clone.position.z += 0.1;
          
          // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É
          scene.add(clone);
          placedObjects.push(clone);
          
          // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          if (selectedObject) {
            unhighlightObject(selectedObject);
          }
          selectedObject = clone;
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–∏–º–∞—Ü–∏–∏
          selectedObject.userData.originalScale = selectedObject.scale.clone();
          
          // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
          highlightObject(selectedObject);
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const deleteObject = (object) => {
          if (!object) return;
          
          // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
          const index = placedObjects.indexOf(object);
          if (index !== -1) {
            // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞
            placedObjects.splice(index, 1);
            
            // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            if (object.userData.pulseAnimation) {
              clearInterval(object.userData.pulseAnimation);
            }
            
            // –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ü–µ–Ω—ã
            scene.remove(object);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            selectedObject = null;
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            hideObjectContextMenu();
          }
        };
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Å–∞–Ω–∏–π –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        renderer.domElement.addEventListener('touchstart', (event) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–∞—Å–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
          if (contextMenuVisible) {
            let target = event.target;
            while (target) {
              if (target.id === 'objectContextMenu' || target.classList?.contains('context-menu-button')) {
                return; // –ï—Å–ª–∏ –∫–∞—Å–∞–Ω–∏–µ –ø–æ –º–µ–Ω—é, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –≤—Ä–∞—â–µ–Ω–∏–µ
              }
              target = target.parentElement;
            }
          }
          
          if (selectedObject && document.getElementById('rotateButton')?.classList.contains('active')) {
            isRotating = true;
            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞—Å–∞–Ω–∏—è
            rotationStartPosition.x = event.touches[0].clientX;
            rotationStartPosition.y = event.touches[0].clientY;
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
            event.preventDefault();
          }
        }, { passive: false });
        
        renderer.domElement.addEventListener('touchmove', (event) => {
          if (isRotating && selectedObject) {
            // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∫–∞—Å–∞–Ω–∏—è
            const deltaX = (event.touches[0].clientX - rotationStartPosition.x) * 0.01;
            const deltaY = (event.touches[0].clientY - rotationStartPosition.y) * 0.01;
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Å–∏
            if (rotationAxis === 'y') {
              selectedObject.rotation.y += deltaX;
            } else if (rotationAxis === 'x') {
              selectedObject.rotation.x += deltaY;
            } else if (rotationAxis === 'z') {
              selectedObject.rotation.z += deltaX;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞—Å–∞–Ω–∏—è
            rotationStartPosition.x = event.touches[0].clientX;
            rotationStartPosition.y = event.touches[0].clientY;
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
            event.preventDefault();
          }
        }, { passive: false });
        
        renderer.domElement.addEventListener('touchend', (event) => {
          isRotating = false;
        });
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ hit-test
        const setupHitTest = async (session) => {
          const viewerSpace = await session.requestReferenceSpace('viewer');
          const hitTestSource = await session.requestHitTestSource?.({ space: viewerSpace });
           
          if (!hitTestSource) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ hit-test');
            return;
          }
          
          // –°–æ–∑–¥–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
          const reticleGeometry = new THREE.RingGeometry(0.15, 0.2, 32).rotateX(-Math.PI / 2);
          const reticleMaterial = new THREE.MeshBasicMaterial();
          const reticle = new THREE.Mesh(reticleGeometry, reticleMaterial);
          reticle.matrixAutoUpdate = false;
          reticle.visible = false;
          scene.add(reticle);
          
          // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const MAX_DEMO_OBJECTS = 3;
          let placedObjectsCount = 0;
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
          const controller = renderer.xr.getController(0);
          
          // –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —É–¥–∞–ª–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∫–æ–¥
          controller.addEventListener('select', (event) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UI
            if (interactingWithUI) {
              console.log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å UI');
              return;
            }
            
            const placementButton = document.getElementById('placementButton');
            const editButton = document.getElementById('editButton');
            const rotateButton = document.getElementById('rotateButton');
            const deleteButton = document.getElementById('deleteButton');
            
            // –†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            if (placementButton && placementButton.classList.contains('active') && reticle.visible) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              if (isDemoUser && placedObjects.length >= MAX_DEMO_OBJECTS) {                
                    alert('–õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤.');
                return;
              }
            
              // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
              const modelSelect = document.getElementById('modelSelect');
              let selectedModel = 'cube'; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
              
              if (modelSelect) {
                selectedModel = modelSelect.value;
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                if (!selectedModel && modelSelect.selectedIndex >= 0 && modelSelect.options[modelSelect.selectedIndex]) {
                  selectedModel = modelSelect.options[modelSelect.selectedIndex].value;
                }
              }
              
              console.log('–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ç–∏–ø–∞:', selectedModel);
              
              let mesh;

                if (loadedModels[selectedModel]) {
                mesh = loadedModels[selectedModel].clone();
                mesh.scale.set(0.4, 0.4, 0.4);  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å: ${selectedModel}`, mesh);
                } else if (selectedModel === 'userModel') {
                if (loadedModels.userModel) {
                    mesh = loadedModels.userModel.clone();
                    mesh.scale.set(0.5, 0.5, 0.5);  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏
                    console.log('–†–∞–∑–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –º–æ–¥–µ–ª—å');
                } else {
                    console.warn('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç');
                    mesh = new THREE.Mesh(
                    new THREE.BoxGeometry(0.3, 0.3, 0.3),  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø–∞—Å–Ω–æ–≥–æ –∫—É–±–∞
                    new THREE.MeshStandardMaterial({ color: 0x00ff00 })
                    );
                }
                } else {
                console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏:', selectedModel, '- —Å–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É–±');
                mesh = new THREE.Mesh(
                    new THREE.BoxGeometry(0.3, 0.3, 0.3),  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫—É–±–∞
                    new THREE.MeshStandardMaterial({ color: 0x1E90FF })
                );
                }

              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
              mesh.position.setFromMatrixPosition(reticle.matrix);
              mesh.userData.selectable = true; // –û—Ç–º–µ—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—ã–±–æ—Ä–∞
              
              scene.add(mesh);
              placedObjects.push(mesh);
              placedObjectsCount++;
              
              // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –µ–≥–æ
              if (selectedObject) {
                unhighlightObject(selectedObject);
              }
              selectedObject = mesh;
              
              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–∏–º–∞—Ü–∏–∏
              selectedObject.userData.originalScale = selectedObject.scale.clone();
              
              // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
              highlightObject(selectedObject);
            } 
            // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –≤—Ä–∞—â–µ–Ω–∏—è - –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞
            else if ((editButton && editButton.classList.contains('active') && !isDemoUser) || 
                     (rotateButton && rotateButton.classList.contains('active')) ||
                     (deleteButton && deleteButton.classList.contains('active') && !isDemoUser)) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ª–∏ –º—ã –∫–∞–∫–æ–π-—Ç–æ –æ–±—ä–µ–∫—Ç
              const raycaster = new THREE.Raycaster();
              const tmpVector = new THREE.Vector2(0, 0); // –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—É—á –∏–∑ –∫–∞–º–µ—Ä—ã
              raycaster.setFromCamera(tmpVector, camera);
              
              // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –ª—É—á–æ–º
              const intersects = raycaster.intersectObjects(placedObjects, true);
              
              if (intersects.length > 0) {
                // –ù–∞—Ö–æ–¥–∏–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –æ–±—ä–µ–∫—Ç –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
                let selected = intersects[0].object;
                let parent = selected;
                
                // –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ placedObjects
                while (parent.parent && !placedObjects.includes(parent)) {
                  parent = parent.parent;
                }
                
                // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∫–æ—Ä–Ω–µ–≤–æ–π –æ–±—ä–µ–∫—Ç –≤ placedObjects, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if (placedObjects.includes(parent)) {
                  selected = parent;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è
                if (deleteButton && deleteButton.classList.contains('active') && !isDemoUser) {
                  // –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
                  deleteObject(selected);
                  
                  // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                  setTimeout(() => {
                    deleteButton.classList.remove('active');
                    placementButton.classList.add('active');
                  }, 300);
                  
                  return;
                }
                
                // –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if (selectedObject && selectedObject !== selected) {
                  unhighlightObject(selectedObject);
                }
                
                // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –∏ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –µ–≥–æ
                selectedObject = selected;
                highlightObject(selectedObject);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∞–Ω–∏–º–∞—Ü–∏–∏
                if (!selectedObject.userData.originalScale) {
                  selectedObject.userData.originalScale = selectedObject.scale.clone();
                }
              } else {
                // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                if (selectedObject) {
                  unhighlightObject(selectedObject);
                  selectedObject = null;
                }
              }
            }
          });
          
          // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è
          const onXRFrame = (time, frame) => {
            if (!frame) return session.requestAnimationFrame(onXRFrame);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã hit-test
            const hitTestResults = frame.getHitTestResults(hitTestSource);
            
            if (hitTestResults.length) {
              const hit = hitTestResults[0];
              const referenceSpace = renderer.xr.getReferenceSpace();
               
              if (referenceSpace) {
                const pose = hit.getPose(referenceSpace);
                
                if (pose) {
                  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
                  const placementButton = document.getElementById('placementButton');
                  if (placementButton && placementButton.classList.contains('active')) {
                    reticle.visible = true;
                    reticle.matrix.fromArray(pose.transform.matrix);
                  } else {
                    reticle.visible = false;
                  }
                }
              }
            } else {
              reticle.visible = false;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if (planes.active && planes.meshes.size > 0) {
              planes.meshes.forEach((mesh) => {
                mesh.visible = true;
              });
            } else {
              planes.meshes.forEach((mesh) => {
                mesh.visible = false;
              });
            }
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ –º—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
            if (selectedObject) {
              if (editButton && editButton.classList.contains('active') && !isDemoUser) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
                if (hitTestResults.length > 0) {
                  const hit = hitTestResults[0];
                  const referenceSpace = renderer.xr.getReferenceSpace();
                  if (referenceSpace) {
                    const pose = hit.getPose(referenceSpace);
                    if (pose) {
                      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                      selectedObject.position.set(
                        pose.transform.position.x,
                        pose.transform.position.y,
                        pose.transform.position.z
                      );
                    }
                  }
                }
              } 
              // –î–ª—è —Ä–µ–∂–∏–º–∞ –≤—Ä–∞—â–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              // –û—Å–Ω–æ–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è touchmove
            }
            
            renderer.render(scene, camera);
            session.requestAnimationFrame(onXRFrame);
          };
          
          session.requestAnimationFrame(onXRFrame);
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
        renderer.xr.addEventListener('sessionend', () => {
          console.log('AR session ended');
          setArActive(false);
          
          // –û—á–∏—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
          if (selectedObject) {
            unhighlightObject(selectedObject);
          }
          selectedObject = null;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ARButton –∏ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          xrButton.style.display = 'block';
          modelSelectContainer.style.display = 'none';
        //   stopArButton.style.display = 'none';
          
          // –°–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ AR
          const burgerMenuBtn = document.getElementById('burgerMenuButton');
          if (burgerMenuBtn) {
            burgerMenuBtn.style.display = 'none';
          }
          
          // –£–¥–∞–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Å–µ–π, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          const axisSelector = document.getElementById('axisSelector');
          if (axisSelector) {
            axisSelector.style.display = 'none';
          }
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ AR
          if (isDemoUser) {
            const demoAlert = document.createElement('div');
            demoAlert.className = 'model-error-notification';
            demoAlert.textContent = '–î–µ–º–æ-—Ä–µ–∂–∏–º: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.';
            document.body.appendChild(demoAlert);
            
            setTimeout(() => {
              if (demoAlert.parentNode) {
                demoAlert.parentNode.removeChild(demoAlert);
              }
            }, 3000);
          }
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ä–∞—â–µ–Ω–∏—è
          selectedObject = null;
          isRotating = false;
          
          // –û—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É –æ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
          placedObjects.forEach(obj => {
            // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            if (obj.userData.pulseAnimation) {
              clearInterval(obj.userData.pulseAnimation);
            }
            scene.remove(obj);
          });
          placedObjects.length = 0;
          
          // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
          originalMaterials.clear();
          
          // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
          const contextMenu = document.getElementById('objectContextMenu');
          if (contextMenu && contextMenu.parentNode) {
            contextMenu.parentNode.removeChild(contextMenu);
          }
          contextMenuVisible = false;
        });
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è 3D –∫–∞—Ä—Ç—ã (–Ω–µ AR —Ä–µ–∂–∏–º)
        const animate = () => {
          renderer.setAnimationLoop((time, frame) => {
            if (!frame) {
              renderer.render(scene, camera);
            }
          });
        };
        animate();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        const handleResize = () => {
          camera.aspect = window.innerWidth / window.innerHeight;
          camera.updateProjectionMatrix();
          renderer.setSize(window.innerWidth, window.innerHeight);
        };
        window.addEventListener('resize', handleResize);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const placementButton = document.getElementById('placementButton');
        const editButton = document.getElementById('editButton');
        const rotateButton = document.getElementById('rotateButton');
        const deleteButton = document.getElementById('deleteButton');
        
        if (placementButton && editButton && rotateButton) {
          placementButton.addEventListener('click', () => {
            placementButton.classList.add('active');
            editButton.classList.remove('active');
            if (rotateButton) rotateButton.classList.remove('active');
            if (deleteButton) deleteButton.classList.remove('active');
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Å–µ–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—Ä–∞—â–µ–Ω–∏—è
            const axisSelector = document.getElementById('axisSelector');
            if (axisSelector) {
              axisSelector.style.display = 'none';
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            if (selectedObject) {
              unhighlightObject(selectedObject);
              selectedObject = null;
            }
          });
          
          if (!isDemoUser) {
            editButton.addEventListener('click', () => {
              editButton.classList.add('active');
              placementButton.classList.remove('active');
              if (rotateButton) rotateButton.classList.remove('active');
              if (deleteButton) deleteButton.classList.remove('active');
              
              // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Å–µ–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—Ä–∞—â–µ–Ω–∏—è
              const axisSelector = document.getElementById('axisSelector');
              if (axisSelector) {
                axisSelector.style.display = 'none';
              }
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∂–∏–º–æ–≤
            rotateButton.addEventListener('click', () => {
              rotateButton.classList.add('active');
              placementButton.classList.remove('active');
              if (!isDemoUser) editButton.classList.remove('active');
              if (deleteButton) deleteButton.classList.remove('active');
              
              // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã UI –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–∏ –≤—Ä–∞—â–µ–Ω–∏—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
              let axisSelector = document.getElementById('axisSelector');
              if (!axisSelector) {
                axisSelector = document.createElement('div');
                axisSelector.id = 'axisSelector';
                axisSelector.className = 'axis-selector';
                axisSelector.innerHTML = `
                  <span>–û—Å—å –≤—Ä–∞—â–µ–Ω–∏—è:</span>
                  <button data-axis="x" ${rotationAxis === 'x' ? 'class="active"' : ''}>X</button>
                  <button data-axis="y" ${rotationAxis === 'y' ? 'class="active"' : ''}>Y</button>
                  <button data-axis="z" ${rotationAxis === 'z' ? 'class="active"' : ''}>Z</button>
                `;
                modelSelectContainer.appendChild(axisSelector);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –æ—Å–∏
                const axisButtons = axisSelector.querySelectorAll('button');
                axisButtons.forEach(button => {
                  button.addEventListener('click', (e) => {
                    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                    axisButtons.forEach(btn => btn.classList.remove('active'));
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞ –Ω–∞–∂–∞—Ç—É—é –∫–Ω–æ–ø–∫—É
                    e.target.classList.add('active');
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –æ—Å—å –≤—Ä–∞—â–µ–Ω–∏—è
                    rotationAxis = e.target.dataset.axis;
                    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π
                    e.stopPropagation();
                  });
                });
              } else {
                axisSelector.style.display = 'flex';
              }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
            if (deleteButton) {
              deleteButton.addEventListener('click', () => {
                deleteButton.classList.add('active');
                placementButton.classList.remove('active');
                if (!isDemoUser) editButton.classList.remove('active');
                rotateButton.classList.remove('active');
                
                // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –æ—Å–µ–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤—Ä–∞—â–µ–Ω–∏—è
                const axisSelector = document.getElementById('axisSelector');
                if (axisSelector) {
                  axisSelector.style.display = 'none';
                }
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if (selectedObject) {
                  deleteObject(selectedObject);
                  selectedObject = null;
                } else {
                  // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                  const notification = document.createElement('div');
                  notification.className = 'model-error-notification';
                  notification.textContent = '–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è';
                  document.body.appendChild(notification);
                  
                  setTimeout(() => {
                    if (notification.parentNode) {
                      notification.parentNode.removeChild(notification);
                    }
                  }, 3000);
                }
                
                // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                setTimeout(() => {
                  deleteButton.classList.remove('active');
                  placementButton.classList.add('active');
                }, 300);
              });
            }
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
        const showPlanesButtonEl = document.getElementById('showPlanesButton');
        if (showPlanesButtonEl) {
          showPlanesButtonEl.addEventListener('click', () => {
            planes.active = !planes.active;
            if (planes.active) {
              showPlanesButtonEl.classList.add('active');
            } else {
              showPlanesButtonEl.classList.remove('active');
            }
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AR
        const stopArButtonEl = document.getElementById('stopArButton');
        if (stopArButtonEl) {
          stopArButtonEl.addEventListener('click', () => {
            if (renderer.xr.isPresenting) {
              renderer.xr.getSession()?.end();
            }
          });
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é
        const burgerMenuButtonEl = document.getElementById('burgerMenuButton');
        if (burgerMenuButtonEl) {
          burgerMenuButtonEl.addEventListener('click', () => {
            const modelSelectContainer = document.querySelector('.model-select');
            if (modelSelectContainer) {
              // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π
              if (modelSelectContainer.style.display === 'none') {
                modelSelectContainer.style.display = 'flex';
              } else {
                modelSelectContainer.style.display = 'none';
              }
            }
          });
        }
        
        // –ü—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AR
        modelSelectContainer.style.display = 'none';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –±—É—Ä–≥–µ—Ä-–º–µ–Ω—é –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        const burgerMenuBtn = document.getElementById('burgerMenuButton');
        if (burgerMenuBtn) {
          burgerMenuBtn.style.display = 'none';
        }
        
        // –ü—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—á–∏—â–∞–µ–º URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏
        return () => {
          // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
          window.removeEventListener('resize', handleResize);
          renderer.setAnimationLoop(null);
          if (mountRef.current && renderer.domElement.parentNode === mountRef.current) {
            mountRef.current.removeChild(renderer.domElement);
          }
          
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
          if (uiContainer && uiContainer.parentNode) {
            uiContainer.parentNode.removeChild(uiContainer);
          }
          if (xrButton && xrButton.parentNode) {
            xrButton.parentNode.removeChild(xrButton);
          }
          
          // –û–±–Ω—É–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ AR
          startARSessionFunction = null;
          
          // –û—á–∏—â–∞–µ–º URL –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
          if (userModel && userModel.url) {
            try {
              URL.revokeObjectURL(userModel.url);
            } catch (e) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ URL –æ–±—ä–µ–∫—Ç–∞:', e);
            }
          }
        };
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AR:', error);
      }
    };

    loadScripts();
  }, [isDemoUser, token, userModel]);

  return (
    <div 
      ref={mountRef} 
      className="ar-container" 
    />
  );
}

export default AR; 